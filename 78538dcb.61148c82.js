(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{122:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return d})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var r=t(2),a=t(6),o=(t(0),t(147)),i={id:"advanced-topics-key-bindings",title:"Key Bindings"},d={id:"advanced-topics-key-bindings",title:"Key Bindings",description:"The Editor component offers flexibility to define custom key bindings",source:"@site/../docs/Advanced-Topics-Key-Bindings.md",permalink:"/docs/advanced-topics-key-bindings",editUrl:"https://github.com/facebook/draft-js/edit/master/docs/../docs/Advanced-Topics-Key-Bindings.md",lastUpdatedBy:"Jacob D. Castro",lastUpdatedAt:1590020787,sidebar:"docs",previous:{title:"Decorators",permalink:"/docs/advanced-topics-decorators"},next:{title:"Managing Focus",permalink:"/docs/advanced-topics-managing-focus"}},c=[{value:"Defaults",id:"defaults",children:[]},{value:"Customization",id:"customization",children:[]},{value:"Example",id:"example",children:[]}],l={rightToc:c};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Editor")," component offers flexibility to define custom key bindings\nfor your editor, via the ",Object(o.b)("inlineCode",{parentName:"p"},"keyBindingFn")," prop. This allows you to match key\ncommands to behaviors in your editor component."),Object(o.b)("h2",{id:"defaults"},"Defaults"),Object(o.b)("p",null,"The default key binding function is ",Object(o.b)("inlineCode",{parentName:"p"},"getDefaultKeyBinding"),"."),Object(o.b)("p",null,"Since the Draft framework maintains tight control over DOM rendering and\nbehavior, basic editing commands must be captured and routed through the key\nbinding system."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"getDefaultKeyBinding")," maps known OS-level editor commands to ",Object(o.b)("inlineCode",{parentName:"p"},"DraftEditorCommand"),"\nstrings, which then correspond to behaviors within component handlers."),Object(o.b)("p",null,"For instance, ",Object(o.b)("inlineCode",{parentName:"p"},"Ctrl+Z")," (Win) and ",Object(o.b)("inlineCode",{parentName:"p"},"Cmd+Z")," (OSX) map to the ",Object(o.b)("inlineCode",{parentName:"p"},"'undo'")," command,\nwhich then routes our handler to perform an ",Object(o.b)("inlineCode",{parentName:"p"},"EditorState.undo()"),"."),Object(o.b)("h2",{id:"customization"},"Customization"),Object(o.b)("p",null,"You may provide your own key binding function to supply custom command strings."),Object(o.b)("p",null,"It is recommended that your function use ",Object(o.b)("inlineCode",{parentName:"p"},"getDefaultKeyBinding")," as a\nfall-through case, so that your editor may benefit from default commands."),Object(o.b)("p",null,"With your custom command string, you may then implement the ",Object(o.b)("inlineCode",{parentName:"p"},"handleKeyCommand"),"\nprop function, which allows you to map that command string to your desired\nbehavior. If ",Object(o.b)("inlineCode",{parentName:"p"},"handleKeyCommand")," returns ",Object(o.b)("inlineCode",{parentName:"p"},"'handled'"),", the command is considered\nhandled. If it returns ",Object(o.b)("inlineCode",{parentName:"p"},"'not-handled'"),", the command will fall through."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,'Let\'s say we have an editor that should have a "Save" mechanism to periodically\nwrite your contents to the server as a draft copy.'),Object(o.b)("p",null,"First, let's define our key binding function:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import {getDefaultKeyBinding, KeyBindingUtil} from 'draft-js';\nconst {hasCommandModifier} = KeyBindingUtil;\n\nfunction myKeyBindingFn(e: SyntheticKeyboardEvent): string | null {\n  if (e.keyCode === 83 /* `S` key */ && hasCommandModifier(e)) {\n    return 'myeditor-save';\n  }\n  return getDefaultKeyBinding(e);\n}\n")),Object(o.b)("p",null,"Our function receives a key event, and we check whether it matches our criteria:\nit must be an ",Object(o.b)("inlineCode",{parentName:"p"},"S")," key, and it must have a command modifier, i.e. the command\nkey for OSX, or the control key otherwise."),Object(o.b)("p",null,"If the command is a match, return a string that names the command. Otherwise,\nfall through to the default key bindings."),Object(o.b)("p",null,"In our editor component, we can then make use of the command via the\n",Object(o.b)("inlineCode",{parentName:"p"},"handleKeyCommand")," prop:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import {Editor} from 'draft-js';\nclass MyEditor extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n  // ...\n\n  handleKeyCommand(command: string): DraftHandleValue {\n    if (command === 'myeditor-save') {\n      // Perform a request to save your contents, set\n      // a new `editorState`, etc.\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        keyBindingFn={myKeyBindingFn}\n        ...\n      />\n    );\n  }\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"'myeditor-save'")," command can be used for our custom behavior, and returning\n",Object(o.b)("inlineCode",{parentName:"p"},"'handled'")," instructs the editor that the command has been handled and no more work\nis required."),Object(o.b)("p",null,"By returning ",Object(o.b)("inlineCode",{parentName:"p"},"'not-handled'")," in all other cases, default commands are able to fall\nthrough to default handler behavior."))}s.isMDXComponent=!0},147:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),s=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},m=function(e){var n=s(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=s(t),p=r,b=m["".concat(i,".").concat(p)]||m[p]||u[p]||o;return t?a.a.createElement(b,d(d({ref:n},l),{},{components:t})):a.a.createElement(b,d({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);